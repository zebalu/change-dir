plugins {
    id("org.jreleaser") version "1.18.0" apply false
}

subprojects { subProject ->

    subProject.plugins.apply('maven-publish')
    subProject.plugins.apply('java-library')
    subProject.plugins.apply('signing')
    subProject.plugins.apply('org.jreleaser')
    subProject.group = "io.github.zebalu"
    subProject.version = '0.0.1'

    subProject.publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                // Add POM metadata for Maven Central requirements
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/zebalu/change-dir'
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'zebalu'
                            name = 'Bal√°zs Zaicsek'
                            email = 'zebalu@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/zebalu/change-dir.git'
                        developerConnection = 'scm:git:ssh://github.com:zebalu/change-dir.git'
                        url = 'https://github.com/zebalu/change-dir'
                    }
                }
            }
        }
    }

    subProject.tasks.withType(Jar) {
        into("META-INF/maven/$project.group/$project.name") {
            from { generatePomFileForMavenJavaPublication }
            rename ".*", "pom.xml"
        }
    }

    subProject.signing {
        if (subProject.hasProperty("doGpg")) {
            sign publishing.publications
            useGpgCmd()
        }
        // sign([publishing.publications.mavenJava])
        // The key ID should be the long key ID or the email associated with the key
        // signing.keyId = 'YOUR_GPG_KEY_ID'
        // signing.secretKeyRingFile = file('/path/to/your/secring.gpg') // Only if you have a custom keyring location
    }

    subProject.jreleaser {
        signing {
            active = 'ALWAYS'
            armored = true
        }
        checksum {
            algorithms = ['SHA-256','SHA-512']
        }
        distributions {
            'maven-central' { // Name of your distribution
                active = 'ALWAYS'
                artifacts {
                    artifact {
                        path = 'build/libs/' + project.name + '-' + project.version + '.jar' // Path to your main JAR
                    }
                    artifact {
                        path = 'build/libs/' + project.name + '-' + project.version + '-sources.jar' // Path to sources JAR
                        //classifier = 'sources'
                    }
                    artifact {
                        path = 'build/libs/' + project.name + '-' + project.version + '-javadoc.jar' // Path to Javadoc JAR
                        //classifier = 'javadoc'
                    }
                }
            }
        }
        deploy {
            maven {
                mavenCentral {
                    sonatype {
                        active='ALWAYS'
                        url = 'https://central.sonatype.com/api/v1/publisher'
                        stagingRepository('target/staging-deploy')
                    }
                }
            }
        }
    }
}